#!/bin/bash
# 
# A script for running a productive development environment with Docker 
# on OS X. See https://github.com/brikis98/docker-osx-dev for more info.

set -e

# Console colors
readonly COLOR_DEBUG='\033[1;36m'
readonly COLOR_INFO='\033[0;32m'
readonly COLOR_WARN='\033[1;33m'
readonly COLOR_ERROR='\033[0;31m'
readonly COLOR_INSTRUCTIONS='\033[0;37m'
readonly COLOR_END='\033[0m'

# Log levels 
readonly LOG_LEVEL_DEBUG="DEBUG"
readonly LOG_LEVEL_INFO="INFO"
readonly LOG_LEVEL_WARN="WARN"
readonly LOG_LEVEL_ERROR="ERROR"
readonly LOG_LEVEL_INSTRUCTIONS="INSTRUCTIONS"
readonly LOG_LEVELS=($LOG_LEVEL_DEBUG $LOG_LEVEL_INFO $LOG_LEVEL_WARN $LOG_LEVEL_ERROR $LOG_LEVEL_INSTRUCTIONS)
readonly DEFAULT_LOG_LEVEL="$LOG_LEVEL_INFO"

# Boot2Docker constants
readonly DOCKER_HOST_NAME="dockerhost"
readonly BOOT2DOCKER_USER="docker"
readonly BOOT2DOCKER_SSH_URL="$BOOT2DOCKER_USER@$DOCKER_HOST_NAME"

# docker-machine constants
readonly DOCKER_MACHINE_NAME="virtualbox"

# docker-compose constants
readonly DEFAULT_COMPOSE_FILE="docker-compose.yml"

# Sync and watch constants
readonly DEFAULT_PATHS_TO_SYNC=(".")
readonly DEFAULT_EXCLUDES=(".git")
readonly DEFAULT_IGNORE_FILE=".dockerignore"
readonly RSYNC_FLAGS=("archive" "verbose" "delete" "omit-dir-times" "inplace" "whole-file")

# Global variables. The should only ever be set by the corresponding 
# configure_XXX functions.
PATHS_TO_SYNC=()
EXCLUDES=()
CURRENT_LOG_LEVEL="$DEFAULT_LOG_LEVEL"
VIRTUALIZATION_TOOL="boot2docker"

# Helper function to log an INFO message. See the log function for details.
function log_info {
  log $COLOR_INFO $LOG_LEVEL_INFO "$@"
}

# Helper function to log a WARN message. See the log function for details.
function log_warn {
  log $COLOR_WARN $LOG_LEVEL_WARN "$@"
}

# Helper function to log a DEBUG message. See the log function for details.
function log_debug {
  log $COLOR_DEBUG $LOG_LEVEL_DEBUG "$@"
}

# Helper function to log an ERROR message. See the log function for details.
function log_error {
  log $COLOR_ERROR $LOG_LEVEL_ERROR "$@"
}

# Helper function to log an INSTRUCTIONS message. See the log function for details.
function log_instructions {
  log $COLOR_INSTRUCTIONS $LOG_LEVEL_INSTRUCTIONS "$@"
}

#
# Usage: vm_command COMMAND
#
# Returns the ssh, ip or other command specific to the chosed virtualization
# tool.
#
# Examples:
#
# $(vm_command ssh) echo foo bar quux
#   runs 'echo foo bar quux' in an SSH session to the VM.
#
function vm_command {
  local prefix="$VIRTUALIZATION_TOOL"
  local command="$1"
  local suffix=""

  case "$VIRTUALIZATION_TOOL" in
    "boot2docker")
      # boot2docker specific per-command tweaks
      ;;
    "docker-machine")
      suffix="$DOCKER_MACHINE_NAME"
      # docker-machine specific per-command tweaks
      ;;
  esac
  echo "$prefix $command $suffix"
}

#
# Usage: boot2docker_ssh_key
#
# Return the path to the boot2docker SSH key.
#
function boot2docker_ssh_key {
  echo $(boot2docker cfg | grep "^SSHKey = " | sed -e 's/^SSHKey = "\(.*\)"/\1/')
}

#
# Usage: docker_machine_ssh_key
#
# Return the path to the docker-machine SSH key.
#
function docker_machine_ssh_key {
  echo $(docker-machine inspect "$DOCKER_MACHINE_NAME" | egrep -m1 StorePath | sed 's/.*: "\(.*\)",/\1/')/id_rsa
}

#
# Usage: index_of VALUE ARRAY
#
# Returns the first index where VALUE appears in ARRAY. If ARRAY does not
# contain VALUE, returns -1.
#
# Examples:
#
# index_of foo ("abc" "foo" "def")
#   Returns: 1
#
# index_of foo ("abc" "def")
#   Returns -1
#
function index_of {
  local readonly value="$1"
  shift
  local readonly array=("$@")

  for (( i = 0; i < ${#array[@]}; i++ )); do
    if [ "${array[$i]}" = "${value}" ]; then
      echo $i
      return
    fi
  done 

  echo -1
}

#
# Usage: log COLOR LEVEL [MESSAGE ...]
#
# Logs MESSAGE to stdout with color COLOR if the log level is at least LEVEL.
# If no MESSAGE is specified, reads from stdin. The log level is determined by 
# the DOCKER_OSX_DEV_LOG_LEVEL environment variable.
#
# Examples:
#
# log $COLOR_INFO $LOG_LEVEL_INFO "Hello, World"
#   Prints: "[INFO] Hello, World" to stdout in green.
#
# echo "Hello, World" | log $COLOR_RED $LOG_LEVEL_ERROR 
#   Prints: "[ERROR] Hello, World" to stdout in red.
#
function log {
  if [[ "$#" -gt 2 ]]; then
    do_log "$@"
  elif [[ "$#" -eq 2 ]]; then
    while read message; do 
      do_log "$1" "$2" "$message"
    done
  else
    echo "Internal error: invalid number of arguments passed to log function: $@"
    exit 1
  fi
}

#
# Usage: do_log COLOR LEVEL MESSAGE ...
#
# Logs MESSAGE to stdout with color COLOR if the log level is at least LEVEL.
# The log level is determined by the DOCKER_OSX_DEV_LOG_LEVEL environment 
# variable.
#
# Examples:
#
# do_log $COLOR_INFO $LOG_LEVEL_INFO "Hello, World"
#   Prints: "[INFO] Hello, World" to stdout in green.
#
function do_log {
  local readonly color="$1"
  shift
  local readonly log_level="$1"
  shift
  local readonly message="$@"

  local readonly log_level_index=$(index_of "$log_level" "${LOG_LEVELS[@]}")
  local readonly current_log_level_index=$(index_of "$CURRENT_LOG_LEVEL" "${LOG_LEVELS[@]}")

  if [[ "$log_level_index" -ge "$current_log_level_index" ]]; then
    echo -e "${color}[${log_level}] ${message}${COLOR_END}"
  fi   
}

#
# Usage: find_path_to_sync_parent PATH
#
# Finds the parent folder of PATH from the PATHS_TO_SYNC global variable. When
# using rsync, we want to sync the exact folders the user specified when 
# running the docker-osx-dev script. However, when we we use fswatch, it gives
# us the path of files that changed, which may be deeply nested inside one of 
# the folders we're supposed to keep in sync. Therefore, this function lets us
# transform one of these nested paths back to one of the top level rsync paths.
#
function find_path_to_sync_parent {
  local readonly path="$1"
  local readonly normalized_path=$(greadlink -m "$path")

  for path_to_sync in "${PATHS_TO_SYNC[@]}"; do
    if [[ "$normalized_path" == $path_to_sync* ]]; then
      echo "$path_to_sync"
      return
    fi
  done
}

#
# Usage: rsync PATH
# 
# Uses rsync to sync PATH to the same PATH on the Boot2Docker VM.
#
# Examples:
#
# rsync /foo
#   Result: the contents of /foo are rsync'ed to /foo on the Boot2Docker VM
#
function do_rsync {
  local readonly path="$1"
  local readonly path_to_sync=$(find_path_to_sync_parent "$path")
  local readonly parent_folder=$(dirname "$path_to_sync")

  local readonly flags="${RSYNC_FLAGS[@]/#/--}"
  local readonly excludes="${EXCLUDES[@]/#/--exclude }"

  local ssh_key=""
  
  case "$VIRTUALIZATION_TOOL" in
    "boot2docker")
      ssh_key=$(boot2docker_ssh_key)
      ;;
    "docker-machine")
      ssh_key=$(docker_machine_ssh_key)
      ;;
  esac

  local readonly rsh="ssh -i $ssh_key -o StrictHostKeyChecking=no"
  local readonly rsh_flag="--rsh=\"$rsh\""
  
  local readonly rsync_cmd="rsync $flags $excludes $rsh_flag $path_to_sync $BOOT2DOCKER_SSH_URL:$parent_folder"
  log_debug "$rsync_cmd"

  eval "$rsync_cmd" 2>&1 | log_info
}

#
# Usage: sync [PATHS ...]
#
# Uses rsync to sync PATHS to the Boot2Docker VM. If one of the values in PATHS
# is not valid (e.g. doesn't exist), it will be ignored.
#
# Examples:
#
# rsync /foo /bar
#   Result: /foo and /bar are rsync'ed to the Boot2DockerVM
#
function sync {
  local readonly paths_to_sync=("$@")

  for path in "${paths_to_sync[@]}"; do
    do_rsync "$path"
  done
}

#
# Usage: join SEPARATOR ARRAY
#
# Joins the elements of ARRAY with the SEPARATOR character between them.
# 
# Examples:
#
# join ", " ("A" "B" "C")
#   Returns: "A, B, C"
#
function join {
  local readonly IFS="$1"
  shift
  echo "$*"
}

#
# Usage: initial_sync PATHS
#
# Perform the initial sync of PATHS to the Boot2Docker VM, including setting up
# all necessary parent directories and permissions.
#
function initial_sync {
  local readonly paths_to_sync=("$@")
  log_info "Performing initial sync of paths: ${paths_to_sync[@]}"

  local dirs_to_create=()
  for path in "${paths_to_sync[@]}"; do
    local readonly parent_dir=$(dirname "$path")
    dirs_to_create+=("$parent_dir")
  done  

  local readonly dir_string=$(join " " "${dirs_to_create[@]}")
  local readonly mkdir_string="sudo mkdir -p $dir_string"
  local readonly chown_string="sudo chown -R $BOOT2DOCKER_USER $dir_string"
  local readonly ssh_cmd="$mkdir_string && $chown_string"

  log_debug "Creating parent directories in Docker VM: $ssh_cmd"
  $(vm_command ssh) "$ssh_cmd"

  sync "${paths_to_sync[@]}"
  log_info "Initial sync done"
}

#
# Usage: watch
#
# Watches the paths in the global variable PATHS_TO_SYNC for changes and rsyncs
# any files that changed.
#
function watch {
  log_info "Watching: ${PATHS_TO_SYNC[@]}"

  local readonly excludes="${EXCLUDES[@]/#/--exclude }"
  local readonly fswatch_cmd="fswatch -0 $excludes ${PATHS_TO_SYNC[@]}"
  log_debug "$fswatch_cmd"

  eval "$fswatch_cmd" | while read -d "" file
  do
    log_info "Detected change in $file"
    sync "$file"
  done  
}

#
# Usage: watch_and_sync
#
# Syncs the paths in the global variable PATHS_TO_SYNC. Kicks off a file watcher
# that will keep those paths in sync.
#
function watch_and_sync {
  initial_sync "${PATHS_TO_SYNC[@]}"
  watch
}

#
# Usage: instructions
#
# Prints the usage instructions for this script to stdout.
# 
function instructions {
  echo -e "Usage: docker-osx-dev [-s PATH] [-e PATH] [-l LOG_LEVEL] [-c COMPOSE_FILE] [-i IGNORE_FILE] [-d | -b] [-h]"
  echo -e 
  echo -e "Options, if supplied, have the following meanings:" 
  echo -e 
  echo -e "-s PATH\t\t\tSync PATH to the Boot2Docker VM. No wildcards allowed. May be specified multiple times. Default: ${DEFAULT_PATHS_TO_SYNC[@]}"
  echo -e "-e PATH\t\t\tExclude PATH while syncing. Wildcards are allowed, but make sure to quote them. May be specified multiple times. Default: ${DEFAULT_EXCLUDES[@]}"
  echo -e "-c COMPOSE_FILE\t\tRead in this docker-compose file and sync any volumes within it. Default: $DEFAULT_COMPOSE_FILE"
  echo -e "-c IGNORE_FILE\t\tRead in this ignore file and exclude any paths within it while syncing. Default: $DEFAULT_IGNORE_FILE"
  echo -e "-l LOG_LEVEL\t\tSpecify the logging level. One of: ${LOG_LEVELS[@]}. Default: ${DEFAULT_LOG_LEVEL}"
  echo -e "-d\t\t\tUse docker-machine"
  echo -e "-b\t\t\tUse boot2docker (default)"
  echo -e "-h\t\t\tPrint this help text."
  echo -e 
  echo -e "Overview:"
  echo -e 
  echo -e "docker-osx-dev is a script you can use to sync folders to the Boot2Docker or VirtualBox"
  echo -e "Docker Machine VM using rsync. It's an alternative to using VirtualBox shared folders,"
  echo -e "which are agonizingly slow and break file watchers."
  echo -e "For more info, see: https://github.com/brikis98/docker-osx-dev"
  echo -e
  echo -e "Example workflow:"
  echo -e 
  echo -e "\t> docker-osx-dev -s /host-folder"
  echo -e "\t> docker run -v /host-folder:/guest-folder some-docker-image"
  echo -e 
  echo -e "After you run the commands above, /host-folder on OS X will be kept in sync with /guest-folder in some-docker-image."
  echo -e 
}

#
# Usage: load_paths_from_docker_compose DOCKER_COMPOSE_FILE
#
# Parses out all volumes: entries from the docker-compose file 
# DOCKER_COMPOSE_FILE. This is a very hacky function that just uses regex
# instead of a proper yaml parser. If it proves to be fragile, it will need to
# be replaced.
#
function load_paths_from_docker_compose {
  local readonly yaml_file_path="$1"
  local in_volumes_block=false
  local paths=()

  if [[ -f "$yaml_file_path" ]]; then
    while read line; do
      if $in_volumes_block; then
        if [[ "${line:0:2}" = "- " ]]; then
          local readonly path=$(echo $line | sed -e "s/- \(.*\):.*$/\1/")
          paths+=("$path")
        else
          in_volumes_block=false
        fi
      else
        if [[ "$line" = "volumes:" ]]; then
          in_volumes_block=true
        fi
      fi
    done < "$yaml_file_path"
  fi

  echo "${paths[@]}"
}

#
# Usage: load_ignore_paths IGNORE_FILE
#
# Parse the paths from IGNORE_FILE that are of the format used by .gitignore and
# .dockerignore: that is, each line contains a single path, and lines that 
# start with a pound sign are treated as comments.
#
function load_ignore_paths {
  local readonly ignore_file="$1"
  local paths=()

  if [[ -f "$ignore_file" ]]; then
    while read line; do
      if [[ "${line:0:1}" != "#" ]]; then
        paths+=("$line")
      fi
    done < "$ignore_file"
  fi

  echo "${paths[@]}"
}

#
# Usage: configure_log_level LEVEL
#
# Set the logging level to LEVEL. LEVEL must be one of the values in LOG_LEVELS.
#
function configure_log_level {
  local readonly level="${1:-$DEFAULT_LOG_LEVEL}"
  local readonly index=$(index_of "$level" "${LOG_LEVELS[@]}")
  
  if [[ "$index" -ge 0 ]]; then
    CURRENT_LOG_LEVEL="$level"
  else
    log_error "Invalid log level specified: $level"
    instructions
    exit 1
  fi  
}

#
# Usage: configure_paths_to_sync COMPOSE_FILE [PATHS_FROM_CMD_LINE ...]
#
# Set the paths that should be synced to the Boot2Docker VM. PATHS_FROM_CMD_LINE 
# are paths specified as command line arguments and will take precedence. If 
# none are specified, this function will try to read the docker-compose file at
# COMPOSE_FILE and load volumes from it. If that fails, this function will fall
# back to the DEFAULT_PATHS_TO_SYNC.
#
function configure_paths_to_sync {
  local readonly compose_file="${1:-$DEFAULT_COMPOSE_FILE}"
  shift
  local readonly paths_to_sync_from_cmd_line=("$@")
  local readonly paths_to_sync_from_compose_file=($(load_paths_from_docker_compose "$compose_file"))

  local paths_to_sync=()
  if [[ "${#paths_to_sync_from_cmd_line[@]}" -gt 0 ]]; then    
    paths_to_sync=("${paths_to_sync_from_cmd_line[@]}")
    log_debug "Using sync paths from command line args: ${paths_to_sync[@]}"
  elif [[ "${#paths_to_sync_from_compose_file}" -gt 0 ]]; then
    paths_to_sync=("${paths_to_sync_from_compose_file[@]}")
    log_info "Using sync paths from Docker Compose file at $compose_file: ${paths_to_sync[@]}"
  else
    paths_to_sync=("${DEFAULT_PATHS_TO_SYNC[@]}")
    log_debug "Using default sync paths: ${paths_to_sync[@]}"
  fi

  for path in "${paths_to_sync[@]}"; do
    local normalized_path=$(greadlink -m "$path")
    PATHS_TO_SYNC+=("$normalized_path")
  done  
}

#
# Usage: configure_excludes IGNORE_FILE [EXCLUDE_PATHS_FROM_CMD_LINE ...]
#
# Sets the paths that should be excluded when syncing files to the Boot2Docker
# VM. EXCLUDE_PATHS_FROM_CMD_LINE are paths specified as command line arguments
# and will take precedence. If none are specified, this function will try to 
# read the ignore file (see load_ignore_paths) at IGNORE_FILE and use those 
# entries as excludes. If that fails, this function will fall back to 
# DEFAULT_EXCLUDES.
#
function configure_excludes {
  local readonly ignore_file="${1:-$DEFAULT_IGNORE_FILE}"
  shift
  local readonly excludes_from_cmd_line=("$@")
  local readonly excludes_from_ignore_file=($(load_ignore_paths "$ignore_file"))

  if [[ "${#excludes_from_cmd_line}" -gt 0 ]]; then
    EXCLUDES=("${excludes_from_cmd_line[@]}")
    log_debug "Using exclude paths from command line args: ${EXCLUDES[@]}"
  elif [[ "${#excludes_from_ignore_file}" -gt 0 ]]; then
    EXCLUDES=("${excludes_from_ignore_file[@]}")
    log_info "Using excludes from ignore file $ignore_file: ${EXCLUDES[@]}"
  else
    EXCLUDES=("${DEFAULT_EXCLUDES[@]}")    
    log_debug "Using default exclude paths: ${EXCLUDES[@]}"
  fi
}

#
# Usage: configure_virtualization_tool USE_DOCKER_MACHINE USE_BOOT2DOCKER
#
# Configure the global virtualization tool variable. Values should be 0 or 1.
# Both cannot be 0 or 1.
#
function configure_virtualization_tool {
  local readonly use_docker_machine="$1"
  local readonly use_boot2docker="$2"
  
  if [[ $use_docker_machine == $use_boot2docker ]]; then
    log_error "Docker Machine and boot2docker are mutually exclusive"
    exit 1
  elif [[ $use_docker_machine -eq 1 ]]; then
    log_debug "Using Docker Machine"
    VIRTUALIZATION_TOOL="docker-machine"
  else
    log_debug "Using boot2docker"
    VIRTUALIZATION_TOOL="boot2docker"
  fi
}

#
# Usage handle_command ARGS ...
#
# Parses ARGS to kick off this script. See the output of the instructions 
# function for details.
#
function handle_command {
  local paths_to_sync=()
  local excludes=()  
  local docker_compose_file=""
  local ignore_file=""
  local log_level=""
  local use_boot2docker=1
  local use_docker_machine=0
  
  while getopts ":s::e::c::l::i::dbh" opt; do
    case "$opt" in
      s)
        paths_to_sync+=("$OPTARG")
        ;;
      e)
        excludes+=("$OPTARG")
        ;;
      c)
        docker_compose_file="$OPTARG"
        ;;
      i)
        ignore_file="$OPTARG"
        ;;
      l)
        log_level="$OPTARG"
        ;;
      d)
        use_docker_machine=1
        use_boot2docker=0
        ;;
      b)
        use_docker_machine=0
        use_boot2docker=1
        ;;
      h)
        instructions
        exit 0
        ;;
      :)
        log_error "Option -$OPTARG requires an argument"
        instructions
        exit 1
        ;;
      \?) 
        log_error "Invalid option: -$OPTARG"
        instructions
        exit 1
        ;;
    esac
  done

  configure_log_level "$log_level"
  configure_paths_to_sync "$docker_compose_file" "${paths_to_sync[@]}"
  configure_excludes "$ignore_file" "${excludes[@]}"
  configure_virtualization_tool "$use_docker_machine" "$use_boot2docker"
  
  watch_and_sync
}

handle_command "$@"
